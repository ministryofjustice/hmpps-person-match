{
    "link_type": "link_and_dedupe",
    "probability_two_random_records_match": 2.649234163203061e-07,
    "retain_matching_columns": true,
    "retain_intermediate_calculation_columns": true,
    "additional_columns_to_retain": [
        "match_id"
    ],
    "sql_dialect": "duckdb",
    "linker_uid": "fctuu1fn",
    "em_convergence": 0.0001,
    "max_iterations": 25,
    "bayes_factor_column_prefix": "bf_",
    "term_frequency_adjustment_column_prefix": "tf_",
    "comparison_vector_value_column_prefix": "gamma_",
    "unique_id_column_name": "id",
    "source_dataset_column_name": "source_system",
    "blocking_rules_to_generate_predictions": [
        "1=1"
    ],
    "comparisons": [
        {
            "output_column_name": "name_comparison",
            "comparison_levels": [
                {
                    "sql_condition": "(\"name_1_std_l\" IS NULL OR \"name_1_std_r\" IS NULL) AND (\"last_name_std_l\" IS NULL OR \"last_name_std_r\" IS NULL)",
                    "label_for_charts": "(name_1_std is NULL) AND (last_name_std is NULL)",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"first_and_last_name_std_l\" = \"first_and_last_name_std_r\"",
                    "label_for_charts": "Exact match on first_and_last_name_std",
                    "m_probability": 0.8805713283069031,
                    "u_probability": 6.4416737775260826e-06,
                    "tf_adjustment_column": "first_and_last_name_std",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"first_and_last_name_std_l\", \"first_and_last_name_std_r\") >= 0.9",
                    "label_for_charts": "Jaro-Winkler distance of first_and_last_name_std >= 0.9",
                    "m_probability": 0.07323973960881489,
                    "u_probability": 0.00046468219642236785,
                    "tf_adjustment_column": "first_and_last_name_std",
                    "tf_adjustment_weight": 0.7
                },
                {
                    "sql_condition": "\"name_1_std_l\" = \"last_name_std_r\" AND \"name_1_std_r\" = \"last_name_std_l\"",
                    "label_for_charts": "Match on reversed cols: name_1_std and last_name_std (both directions)",
                    "m_probability": 0.001957189808750337,
                    "u_probability": 1.1870780153891191e-07
                },
                {
                    "sql_condition": "\n    (array_length(list_intersect(forename_std_arr_l, forename_std_arr_r)) >= 1\n    AND\n    array_length(list_intersect(last_name_std_arr_l, last_name_std_arr_r)) >= 1)\n\n and \n(len(forename_std_arr_l) * len(forename_std_arr_r)\n+\nlen(last_name_std_arr_l) * len(forename_std_arr_r)\n<= 10)\n",
                    "label_for_charts": "Array intersection size >= 1, few elements",
                    "m_probability": 0.01638930823738129,
                    "u_probability": 5.720295598943465e-06
                },
                {
                    "sql_condition": "(array_length(list_intersect(\"forename_std_arr_l\", \"forename_std_arr_r\")) >= 1) AND (array_length(list_intersect(\"last_name_std_arr_l\", \"last_name_std_arr_r\")) >= 1)",
                    "label_for_charts": "(Array intersection size >= 1) AND (Array intersection size >= 1)",
                    "m_probability": 0.004173300248636595,
                    "u_probability": 7.351766922657741e-06
                },
                {
                    "sql_condition": "(jaro_winkler_similarity(\"name_1_std_l\", \"name_1_std_r\") >= 0.7) AND (jaro_winkler_similarity(\"last_name_std_l\", \"last_name_std_r\") >= 0.7)",
                    "label_for_charts": "(Jaro-Winkler distance of name_1_std >= 0.7) AND (Jaro-Winkler distance of last_name_std >= 0.7)",
                    "m_probability": 0.004954401712078166,
                    "u_probability": 0.0004886023257307557
                },
                {
                    "sql_condition": "\"name_1_std_l\" = \"name_1_std_r\"",
                    "label_for_charts": "Exact match on name_1_std",
                    "m_probability": 0.004210367993889316,
                    "u_probability": 0.004258998503613082,
                    "tf_adjustment_column": "name_1_std",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "\"last_name_std_l\" = \"last_name_std_r\"",
                    "label_for_charts": "Exact match on last_name_std",
                    "m_probability": 0.00533261227541768,
                    "u_probability": 0.0007850765819690798,
                    "tf_adjustment_column": "last_name_std",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.004143399354623031,
                    "u_probability": 0.9939830079481641
                }
            ],
            "comparison_description": "CustomComparison"
        },
        {
            "output_column_name": "date_of_birth_arr",
            "comparison_levels": [
                {
                    "sql_condition": "\"date_of_birth_arr_l\" IS NULL OR \"date_of_birth_arr_r\" IS NULL",
                    "label_for_charts": "date_of_birth_arr is NULL",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"date_of_birth_l\" = \"date_of_birth_r\"",
                    "label_for_charts": "Exact match on date_of_birth",
                    "m_probability": 0.9480015447228074,
                    "u_probability": 6.32817809183543e-05,
                    "tf_adjustment_column": "date_of_birth",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "\n            \narray_length(\n    list_intersect(\"date_of_birth_arr_l\", \"date_of_birth_arr_r\")\n)\n >= 1\n            and len(date_of_birth_arr_l) * len(date_of_birth_arr_r) <= 6\n            ",
                    "label_for_charts": "Array intersection size >= 1, few dob aliases",
                    "m_probability": 0.015054619774721108,
                    "u_probability": 1.839371152047235e-05
                },
                {
                    "sql_condition": "\narray_length(\n    list_intersect(\"date_of_birth_arr_l\", \"date_of_birth_arr_r\")\n)\n >=1 ",
                    "label_for_charts": "Array intersection size >= 1, lots of dob aliases",
                    "m_probability": 0.0019527239665209192,
                    "u_probability": 4.259585633069581e-06
                },
                {
                    "sql_condition": "levenshtein(CAST(date_of_birth_l AS TEXT), CAST(date_of_birth_r AS TEXT)) <= 1",
                    "label_for_charts": "Levenshtein distance of cast(date_of_birth as varchar) <= 1",
                    "m_probability": 0.017251329692897888,
                    "u_probability": 0.001769188292516566
                },
                {
                    "sql_condition": "ABS(EPOCH(\"date_of_birth_l\") - EPOCH(\"date_of_birth_r\")) <= 157788000.0",
                    "label_for_charts": "Abs difference of 'date_of_birth <= 5 year'",
                    "m_probability": 0.010200657427295447,
                    "u_probability": 0.21782305372325345
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.0020388218873687394,
                    "u_probability": 0.7803218229061581
                }
            ],
            "comparison_description": "CustomComparison"
        },
        {
            "output_column_name": "postcode_arr",
            "comparison_levels": [
                {
                    "sql_condition": "\"postcode_arr_l\" IS NULL OR \"postcode_arr_r\" IS NULL",
                    "label_for_charts": "postcode_arr is NULL",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                postcode_arr_with_freq_l,\n                x -> CASE\n                        WHEN array_contains(\n                            list_transform(postcode_arr_with_freq_r, y -> y.value),\n                            x.value\n                        )\n                        THEN x.rel_freq\n                        ELSE 1.0\n                    END\n            )\n        ),\n        (p, q) -> p * q\n    ) < 0.00001",
                    "label_for_charts": "tf arr mul < 0.00001",
                    "m_probability": 0.6530514212604018,
                    "u_probability": 1.916780772186791e-05
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                postcode_arr_with_freq_l,\n                x -> CASE\n                        WHEN array_contains(\n                            list_transform(postcode_arr_with_freq_r, y -> y.value),\n                            x.value\n                        )\n                        THEN x.rel_freq\n                        ELSE 1.0\n                    END\n            )\n        ),\n        (p, q) -> p * q\n    ) < 0.0001",
                    "label_for_charts": "tf arr mul < 0.0001",
                    "m_probability": 0.04047911150252939,
                    "u_probability": 9.70967030841373e-06
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                postcode_arr_with_freq_l,\n                x -> CASE\n                        WHEN array_contains(\n                            list_transform(postcode_arr_with_freq_r, y -> y.value),\n                            x.value\n                        )\n                        THEN x.rel_freq\n                        ELSE 1.0\n                    END\n            )\n        ),\n        (p, q) -> p * q\n    ) < 0.001",
                    "label_for_charts": "tf arr mul < 0.001",
                    "m_probability": 0.01468158219941504,
                    "u_probability": 0.00010470776311967955
                },
                {
                    "sql_condition": "array_length(list_intersect(\"postcode_outcode_arr_l\", \"postcode_outcode_arr_r\")) >= 1",
                    "label_for_charts": "Array intersection size >= 1",
                    "m_probability": 0.09228399254208307,
                    "u_probability": 0.002418387421033641
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.1993084330118613,
                    "u_probability": 0.9974480273378163
                }
            ],
            "comparison_description": "CustomComparison"
        },
        {
            "output_column_name": "name_2_std",
            "comparison_levels": [
                {
                    "sql_condition": "\"name_2_std_l\" IS NULL OR \"name_2_std_r\" IS NULL",
                    "label_for_charts": "name_2_std is NULL",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"name_2_std_l\" = \"name_2_std_r\"",
                    "label_for_charts": "Exact match on name_2_std",
                    "m_probability": 0.9311828314925126,
                    "u_probability": 0.012319973710486735,
                    "tf_adjustment_column": "name_2_std",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"name_2_std_l\", \"name_2_std_r\") >= 0.85",
                    "label_for_charts": "Jaro-Winkler distance of name_2_std >= 0.85",
                    "m_probability": 0.030955920552027012,
                    "u_probability": 0.002507835722714576
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.041068944007088604,
                    "u_probability": 0.9851721905667987
                }
            ],
            "comparison_description": "JaroWinklerAtThresholds"
        },
        {
            "output_column_name": "id_comparison",
            "comparison_levels": [
                {
                    "sql_condition": "\n (cro_single_l is null and pnc_single_l is null)\n OR (cro_single_r is null AND pnc_single_r is null)\n ",
                    "label_for_charts": "\n            (cro_single_l is null or cro_single_r is null)\n            AND (pnc_single_l is null or pnc_single_r is null)\n            AND (pnc_single_l is null or cro_single_r is null)\n            AND (cro_single_l is null or pnc_single_r is null)\n            ",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"pnc_single_l\" = \"pnc_single_r\"",
                    "label_for_charts": "Exact match on pnc_single",
                    "m_probability": 0.4107364720646719,
                    "u_probability": 1.3083008349386952e-07,
                    "tf_adjustment_column": "pnc_single",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "\"cro_single_l\" = \"cro_single_r\"",
                    "label_for_charts": "Exact match on cro_single",
                    "m_probability": 0.48754671593636345,
                    "u_probability": 1.3406045592581692e-07,
                    "tf_adjustment_column": "cro_single",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "\n            (\n                substring(pnc_single_l, 7, 6) = substring(cro_single_r, 1, 6)\n                or\n                substring(pnc_single_r, 7, 6) = substring(cro_single_l, 1, 6)\n            )\n            or\n            (\n                substring(pnc_single_l, 1, 5) = substring(pnc_single_r, 1, 5)\n                AND\n                substring(pnc_single_l, 8, 6) = substring(pnc_single_r, 8, 6)\n            )\n            ",
                    "label_for_charts": "PNC and CRO core numbers match",
                    "m_probability": 0.04588131922270574,
                    "u_probability": 1.933377900520516e-06
                },
                {
                    "sql_condition": "\n            (cro_single_l is null or cro_single_r is null)\n            AND (pnc_single_l is null or pnc_single_r is null)\n            ",
                    "label_for_charts": "\n            (cro_single_l is null or cro_single_r is null)\n            AND (pnc_single_l is null or pnc_single_r is null)\n            ",
                    "is_null_level": true
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.05583549277625895,
                    "u_probability": 0.99999780173156
                }
            ],
            "comparison_description": "CustomComparison"
        },
        {
            "output_column_name": "sentence_date_arr",
            "comparison_levels": [
                {
                    "sql_condition": "\"sentence_date_arr_l\" IS NULL OR \"sentence_date_arr_r\" IS NULL",
                    "label_for_charts": "sentence_date_arr is NULL",
                    "is_null_level": true
                },
                {
                    "sql_condition": "array_length(list_intersect(\"sentence_date_arr_l\", \"sentence_date_arr_r\")) >= 1 and len(\"sentence_date_arr_l\") * len(\"sentence_date_arr_r\") = 1",
                    "label_for_charts": "Array intersection size >= 1, one element",
                    "m_probability": 0.079242629203343,
                    "u_probability": 4.1568494682281885e-05
                },
                {
                    "sql_condition": "array_length(list_intersect(\"sentence_date_arr_l\", \"sentence_date_arr_r\")) >= 1 and len(\"sentence_date_arr_l\") * len(\"sentence_date_arr_r\") <= 9",
                    "label_for_charts": "Array intersection size >= 1, few elements",
                    "m_probability": 0.14687596629322805,
                    "u_probability": 0.0002201649974203961
                },
                {
                    "sql_condition": "array_length(list_intersect(\"sentence_date_arr_l\", \"sentence_date_arr_r\")) >= 1 and len(\"sentence_date_arr_l\") * len(\"sentence_date_arr_r\") <= 50",
                    "label_for_charts": "Array intersection size >= 1, medium elements",
                    "m_probability": 0.09497227696435485,
                    "u_probability": 0.00031045886493038003
                },
                {
                    "sql_condition": "array_length(list_intersect(\"sentence_date_arr_l\", \"sentence_date_arr_r\")) >= 1",
                    "label_for_charts": "Array intersection size >= 1, many elements",
                    "m_probability": 0.04663600004321906,
                    "u_probability": 0.00028904399310893716
                },
                {
                    "sql_condition": "\n    abs(datediff('day', sentence_date_arr_l[1], sentence_date_arr_r[1])) <= 14\n    or\n    abs(datediff('day', sentence_date_arr_l[-1], sentence_date_arr_r[-1])) <= 14\n",
                    "label_for_charts": "First or last elements within 2 weeks",
                    "m_probability": 0.007667928792689431,
                    "u_probability": 0.00379946180053296
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.5911625257645615,
                    "u_probability": 0.9953393018493251
                }
            ],
            "comparison_description": "CustomComparison"
        },
        {
            "output_column_name": "override_marker",
            "comparison_levels": [
                {
                    "sql_condition": "override_marker_l IS NULL OR override_marker_r IS NULL",
                    "label_for_charts": "override_marker_r is NULL",
                    "is_null_level": true
                },
                {
                    "sql_condition": "override_marker_l = override_marker_r",
                    "label_for_charts": "Exact match on override_marker",
                    "m_probability": 0.99999999999999999999999999999999999999999999999999,
                    "u_probability": 1e-50
                },
                {
                    "sql_condition": "override_marker_l != override_marker_r AND array_length(list_intersect(override_scopes_l, override_scopes_r)) >= 1",
                    "label_for_charts": "Different manual override in same scope",
                    "m_probability": 1e-50,
                    "u_probability": 0.99999999999999999999999999999999999999999999999999
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.5,
                    "u_probability": 0.5
                }
            ]
        }
    ]
}