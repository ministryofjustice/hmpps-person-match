{
    "$schema": "https://vega.github.io/schema/vega/v6.json",
    "description": "Force-directed graph with hover-driven waterfall chart (replaces the old hover table). Hover an edge to see its match-weight waterfall below.",
    "width": 1400,
    "height": {
        "signal": "plotH + gap + waterfallH"
    },
    "autosize": "pad",
    "padding": {
        "left": 50,
        "right": 50,
        "top": 12,
        "bottom": 50
    },
    "signals": [
        {
            "name": "plotH",
            "value": 500
        },
        {
            "name": "gap",
            "value": 30
        },
        {
            "name": "waterfallH",
            "value": 450
        },
        {
            "name": "$cx",
            "update": "width / 2"
        },
        {
            "name": "$cy",
            "update": "plotH / 2"
        },
        {
            "name": "$nodeRadius",
            "value": 22
        },
        {
            "name": "$nodeCharge",
            "value": -15
        },
        {
            "name": "$linkDistance",
            "value": 140
        },
        {
            "name": "$static",
            "value": false
        },
        {
            "name": "$x_step_waterfall",
            "value": 75
        },
        {
            "name": "scoreThreshold",
            "value": 18,
            "bind": {
                "input": "range",
                "min": -60,
                "max": 60,
                "step": 1,
                "name": "Score Threshold:"
            }
        },
        {
            "description": "Current pointer position during a drag.",
            "name": "fix",
            "value": null,
            "on": [
                {
                    "events": "symbol:pointerdown",
                    "update": "xy()",
                    "force": true
                },
                {
                    "events": "[symbol:pointerdown, window:pointerup] > window:pointermove!",
                    "update": "xy()",
                    "force": true
                }
            ]
        },
        {
            "description": "Graph node currently being dragged.",
            "name": "node",
            "value": null,
            "on": [
                {
                    "events": "symbol:pointerdown",
                    "update": "item()"
                }
            ]
        },
        {
            "description": "Flag to restart force simulation when drag state or threshold changes.",
            "name": "restart",
            "value": 0,
            "on": [
                {
                    "events": {
                        "signal": "fix"
                    },
                    "update": "restart + 1"
                },
                {
                    "events": {
                        "signal": "scoreThreshold"
                    },
                    "update": "restart + 1"
                }
            ]
        },
        {
            "name": "hoverLink",
            "value": null,
            "on": [
                {
                    "events": "@links:mouseover",
                    "update": "datum"
                },
                {
                    "events": "@links:mouseout",
                    "update": "null"
                },
                {
                    "events": "@nodes:mouseover",
                    "update": "null"
                },
                {
                    "events": "view:mouseleave",
                    "update": "null"
                }
            ]
        }
    ],
    "data": [
        {
            "name": "node-data",
            "values": [
                {
                    "id": 0,
                    "match_id": "63eb8ba5-6cad-4e2c-99a7-546dca9ff6c9",
                    "source_system": "DELIUS",
                    "source_system_id": "55ebea32-c781-4ad2-9180-4b641b8cd606",
                    "master_defendant_id": null,
                    "name_1_std": "CLAIRE",
                    "name_2_std": "GEOFFREY",
                    "name_3_std": "FRANCES",
                    "last_name_std": "THOMAS",
                    "first_and_last_name_std": "CLAIRE THOMAS",
                    "forename_std_arr": [
                        "CLAIRE",
                        "GEOFFREY",
                        "BRYAN"
                    ],
                    "forename_first": "CLAIRE",
                    "forename_last": "BRYAN",
                    "last_name_std_arr": [
                        "THOMAS",
                        "HENRY"
                    ],
                    "last_name_first": "THOMAS",
                    "last_name_last": "HENRY",
                    "date_of_birth": "1952-06-26",
                    "date_of_birth_arr": [
                        "1952-06-26"
                    ],
                    "date_of_birth_last": "1952-06-26",
                    "sentence_date_arr": [
                        "1998-12-10",
                        "2004-04-30"
                    ],
                    "sentence_date_first": "1998-12-10",
                    "sentence_date_last": "2004-04-30",
                    "postcode_arr": [
                        "W49JR",
                        "WA6R7AE",
                        "G7D9HX"
                    ],
                    "postcode_first": "W49JR",
                    "postcode_second": "WA6R7AE",
                    "postcode_last": "G7D9HX",
                    "postcode_outcode_arr": [
                        "W4",
                        "WA6R",
                        "G7D"
                    ],
                    "postcode_outcode_first": "W4",
                    "postcode_outcode_last": "G7D",
                    "cro_single": "354009",
                    "pnc_single": "455736",
                    "override_marker": null,
                    "override_scopes": null,
                    "postcode_arr_repacked": [
                        "G7D9HX",
                        "W49JR",
                        "WA6R7AE"
                    ],
                    "postcode_freq_arr": [
                        1.0,
                        1.0,
                        1.0
                    ],
                    "postcode_arr_with_freq": [
                        {
                            "value": "G7D9HX",
                            "rel_freq": 1.0
                        },
                        {
                            "value": "W49JR",
                            "rel_freq": 1.0
                        },
                        {
                            "value": "WA6R7AE",
                            "rel_freq": 1.0
                        }
                    ]
                },
                {
                    "id": 1,
                    "match_id": "31c32969-31fb-4bd1-9e65-861e41bfbb1e",
                    "source_system": "DELIUS",
                    "source_system_id": "1086a9ed-afd8-48eb-be84-5e465804cf4b",
                    "master_defendant_id": null,
                    "name_1_std": "CLAIRE",
                    "name_2_std": "GEOFFREY",
                    "name_3_std": "FRANCES",
                    "last_name_std": "THOMAS",
                    "first_and_last_name_std": "CLAIRE THOMAS",
                    "forename_std_arr": [
                        "CLAIRE",
                        "GEOFFREY",
                        "BRYAN"
                    ],
                    "forename_first": "CLAIRE",
                    "forename_last": "BRYAN",
                    "last_name_std_arr": [
                        "THOMAS",
                        "HENRY"
                    ],
                    "last_name_first": "THOMAS",
                    "last_name_last": "HENRY",
                    "date_of_birth": "1952-06-26",
                    "date_of_birth_arr": [
                        "1952-06-26"
                    ],
                    "date_of_birth_last": "1952-06-26",
                    "sentence_date_arr": [
                        "1998-12-10",
                        "2004-04-30"
                    ],
                    "sentence_date_first": "1998-12-10",
                    "sentence_date_last": "2004-04-30",
                    "postcode_arr": [
                        "W49JR",
                        "WA6R7AE",
                        "G7D9HX"
                    ],
                    "postcode_first": "W49JR",
                    "postcode_second": "WA6R7AE",
                    "postcode_last": "G7D9HX",
                    "postcode_outcode_arr": [
                        "W4",
                        "WA6R",
                        "G7D"
                    ],
                    "postcode_outcode_first": "W4",
                    "postcode_outcode_last": "G7D",
                    "cro_single": "354009",
                    "pnc_single": "455736",
                    "override_marker": null,
                    "override_scopes": null,
                    "postcode_arr_repacked": [
                        "G7D9HX",
                        "W49JR",
                        "WA6R7AE"
                    ],
                    "postcode_freq_arr": [
                        1.0,
                        1.0,
                        1.0
                    ],
                    "postcode_arr_with_freq": [
                        {
                            "value": "G7D9HX",
                            "rel_freq": 1.0
                        },
                        {
                            "value": "W49JR",
                            "rel_freq": 1.0
                        },
                        {
                            "value": "WA6R7AE",
                            "rel_freq": 1.0
                        }
                    ]
                }
            ]
        },
        {
            "name": "link-data",
            "values": [
                {
                    "match_weight": 51.54137674766134,
                    "match_probability": 0.9999999999999997,
                    "source_system_l": "DELIUS",
                    "source_system_r": "DELIUS",
                    "id_l": 0,
                    "id_r": 1,
                    "last_name_std_l": "THOMAS",
                    "last_name_std_r": "THOMAS",
                    "name_1_std_l": "CLAIRE",
                    "name_1_std_r": "CLAIRE",
                    "first_and_last_name_std_l": "CLAIRE THOMAS",
                    "first_and_last_name_std_r": "CLAIRE THOMAS",
                    "forename_std_arr_l": [
                        "CLAIRE",
                        "GEOFFREY",
                        "BRYAN"
                    ],
                    "forename_std_arr_r": [
                        "CLAIRE",
                        "GEOFFREY",
                        "BRYAN"
                    ],
                    "last_name_std_arr_l": [
                        "THOMAS",
                        "HENRY"
                    ],
                    "last_name_std_arr_r": [
                        "THOMAS",
                        "HENRY"
                    ],
                    "date_of_birth_arr_l": [
                        "1952-06-26"
                    ],
                    "date_of_birth_arr_r": [
                        "1952-06-26"
                    ],
                    "date_of_birth_l": "1952-06-26",
                    "date_of_birth_r": "1952-06-26",
                    "postcode_arr_l": [
                        "W49JR",
                        "WA6R7AE",
                        "G7D9HX"
                    ],
                    "postcode_arr_r": [
                        "W49JR",
                        "WA6R7AE",
                        "G7D9HX"
                    ],
                    "postcode_arr_with_freq_l": [
                        {
                            "value": "G7D9HX",
                            "rel_freq": 1.0
                        },
                        {
                            "value": "W49JR",
                            "rel_freq": 1.0
                        },
                        {
                            "value": "WA6R7AE",
                            "rel_freq": 1.0
                        }
                    ],
                    "postcode_arr_with_freq_r": [
                        {
                            "value": "G7D9HX",
                            "rel_freq": 1.0
                        },
                        {
                            "value": "W49JR",
                            "rel_freq": 1.0
                        },
                        {
                            "value": "WA6R7AE",
                            "rel_freq": 1.0
                        }
                    ],
                    "postcode_outcode_arr_l": [
                        "W4",
                        "WA6R",
                        "G7D"
                    ],
                    "postcode_outcode_arr_r": [
                        "W4",
                        "WA6R",
                        "G7D"
                    ],
                    "name_2_std_l": "GEOFFREY",
                    "name_2_std_r": "GEOFFREY",
                    "cro_single_l": "354009",
                    "cro_single_r": "354009",
                    "pnc_single_l": "455736",
                    "pnc_single_r": "455736",
                    "sentence_date_arr_l": [
                        "1998-12-10",
                        "2004-04-30"
                    ],
                    "sentence_date_arr_r": [
                        "1998-12-10",
                        "2004-04-30"
                    ],
                    "override_marker_l": null,
                    "override_marker_r": null,
                    "override_scopes_l": null,
                    "override_scopes_r": null,
                    "master_defendant_id_l": null,
                    "master_defendant_id_r": null,
                    "match_id_l": "63eb8ba5-6cad-4e2c-99a7-546dca9ff6c9",
                    "match_id_r": "31c32969-31fb-4bd1-9e65-861e41bfbb1e",
                    "source": "63eb8ba5-6cad-4e2c-99a7-546dca9ff6c9",
                    "target": "31c32969-31fb-4bd1-9e65-861e41bfbb1e",
                    "waterfall_data": [
                        {
                            "column_name": "Prior",
                            "label_for_charts": "Starting match weight (prior)",
                            "sql_condition": null,
                            "log2_bayes_factor": -21.847920914268045,
                            "bayes_factor": 2.6492348650474123e-07,
                            "comparison_vector_value": null,
                            "m_probability": null,
                            "u_probability": null,
                            "bayes_factor_description": null,
                            "value_l": "",
                            "value_r": "",
                            "term_frequency_adjustment": null,
                            "bar_sort_order": 0
                        },
                        {
                            "sql_condition": "\"first_and_last_name_std_l\" = \"first_and_last_name_std_r\"",
                            "label_for_charts": "Exact match on first_and_last_name_std",
                            "m_probability": 0.8805713283069031,
                            "u_probability": 6.4416737775260826e-06,
                            "bayes_factor": 136699.1497425822,
                            "log2_bayes_factor": 17.060644743964726,
                            "comparison_vector_value": 8,
                            "bayes_factor_description": "If comparison level is `exact match on first_and_last_name_std` then comparison is 136,699 times more likely to be a match",
                            "column_name": "name_comparison",
                            "value_l": "THOMAS, CLAIRE, CLAIRE THOMAS, ['THOMAS', 'HENRY'], ['CLAIRE', 'GEOFFREY', 'BRYAN']",
                            "value_r": "THOMAS, CLAIRE, CLAIRE THOMAS, ['THOMAS', 'HENRY'], ['CLAIRE', 'GEOFFREY', 'BRYAN']",
                            "term_frequency_adjustment": false,
                            "bar_sort_order": 1
                        },
                        {
                            "sql_condition": "\"first_and_last_name_std_l\" = \"first_and_last_name_std_r\"",
                            "label_for_charts": "Term freq adjustment on first_and_last_name_std with weight {cl.tf_adjustment_weight}",
                            "m_probability": null,
                            "u_probability": null,
                            "bayes_factor": 1.0,
                            "log2_bayes_factor": 0.0,
                            "comparison_vector_value": 8,
                            "bayes_factor_description": "Term frequency adjustment on first_and_last_name_std makes comparison 1.00 times more likely to be a match",
                            "column_name": "tf_name_comparison",
                            "value_l": "CLAIRE THOMAS",
                            "value_r": "CLAIRE THOMAS",
                            "term_frequency_adjustment": true,
                            "bar_sort_order": 2
                        },
                        {
                            "sql_condition": "\"date_of_birth_l\" = \"date_of_birth_r\"",
                            "label_for_charts": "Exact match on date_of_birth",
                            "m_probability": 0.9480015447228074,
                            "u_probability": 6.32817809183543e-05,
                            "bayes_factor": 14980.639466293029,
                            "log2_bayes_factor": 13.870811587802677,
                            "comparison_vector_value": 5,
                            "bayes_factor_description": "If comparison level is `exact match on date_of_birth` then comparison is 14,981 times more likely to be a match",
                            "column_name": "date_of_birth_arr",
                            "value_l": "['1952-06-26'], 1952-06-26",
                            "value_r": "['1952-06-26'], 1952-06-26",
                            "term_frequency_adjustment": false,
                            "bar_sort_order": 3
                        },
                        {
                            "sql_condition": "\"date_of_birth_l\" = \"date_of_birth_r\"",
                            "label_for_charts": "Term freq adjustment on date_of_birth with weight {cl.tf_adjustment_weight}",
                            "m_probability": null,
                            "u_probability": null,
                            "bayes_factor": 1.0,
                            "log2_bayes_factor": 0.0,
                            "comparison_vector_value": 5,
                            "bayes_factor_description": "Term frequency adjustment on date_of_birth makes comparison 1.00 times more likely to be a match",
                            "column_name": "tf_date_of_birth_arr",
                            "value_l": "1952-06-26",
                            "value_r": "1952-06-26",
                            "term_frequency_adjustment": true,
                            "bar_sort_order": 4
                        },
                        {
                            "sql_condition": "array_length(list_intersect(\"postcode_outcode_arr_l\", \"postcode_outcode_arr_r\")) >= 1",
                            "label_for_charts": "Array intersection size >= 1",
                            "m_probability": 0.09228399254208307,
                            "u_probability": 0.002418387421033641,
                            "bayes_factor": 38.159308859884845,
                            "log2_bayes_factor": 5.253963136423491,
                            "comparison_vector_value": 1,
                            "bayes_factor_description": "If comparison level is `array intersection size >= 1` then comparison is 38.16 times more likely to be a match",
                            "column_name": "postcode_arr",
                            "value_l": "['W49JR', 'WA6R7AE', 'G7D9HX'], [{'value': 'G7D9HX', 'rel_freq': 1.0}, {'value': 'W49JR', 'rel_freq': 1.0}, {'value': 'WA6R7AE', 'rel_freq': 1.0}], ['W4', 'WA6R', 'G7D']",
                            "value_r": "['W49JR', 'WA6R7AE', 'G7D9HX'], [{'value': 'G7D9HX', 'rel_freq': 1.0}, {'value': 'W49JR', 'rel_freq': 1.0}, {'value': 'WA6R7AE', 'rel_freq': 1.0}], ['W4', 'WA6R', 'G7D']",
                            "term_frequency_adjustment": false,
                            "bar_sort_order": 5
                        },
                        {
                            "sql_condition": "\"name_2_std_l\" = \"name_2_std_r\"",
                            "label_for_charts": "Exact match on name_2_std",
                            "m_probability": 0.9311828314925126,
                            "u_probability": 0.012319973710486735,
                            "bayes_factor": 75.5831833228582,
                            "log2_bayes_factor": 6.239993376483221,
                            "comparison_vector_value": 2,
                            "bayes_factor_description": "If comparison level is `exact match on name_2_std` then comparison is 75.58 times more likely to be a match",
                            "column_name": "name_2_std",
                            "value_l": "GEOFFREY",
                            "value_r": "GEOFFREY",
                            "term_frequency_adjustment": false,
                            "bar_sort_order": 6
                        },
                        {
                            "sql_condition": "\"name_2_std_l\" = \"name_2_std_r\"",
                            "label_for_charts": "Term freq adjustment on name_2_std with weight {cl.tf_adjustment_weight}",
                            "m_probability": null,
                            "u_probability": null,
                            "bayes_factor": 1.0,
                            "log2_bayes_factor": 0.0,
                            "comparison_vector_value": 2,
                            "bayes_factor_description": "Term frequency adjustment on name_2_std makes comparison 1.00 times more likely to be a match",
                            "column_name": "tf_name_2_std",
                            "value_l": "GEOFFREY",
                            "value_r": "GEOFFREY",
                            "term_frequency_adjustment": true,
                            "bar_sort_order": 7
                        },
                        {
                            "sql_condition": "\"pnc_single_l\" = \"pnc_single_r\"",
                            "label_for_charts": "Exact match on pnc_single",
                            "m_probability": 0.4107364720646719,
                            "u_probability": 1.3083008349386952e-07,
                            "bayes_factor": 3139465.0304868016,
                            "log2_bayes_factor": 21.582087312002308,
                            "comparison_vector_value": 3,
                            "bayes_factor_description": "If comparison level is `exact match on pnc_single` then comparison is 3,139,465 times more likely to be a match",
                            "column_name": "id_comparison",
                            "value_l": "455736, 354009",
                            "value_r": "455736, 354009",
                            "term_frequency_adjustment": false,
                            "bar_sort_order": 8
                        },
                        {
                            "sql_condition": "\"pnc_single_l\" = \"pnc_single_r\"",
                            "label_for_charts": "Term freq adjustment on pnc_single with weight {cl.tf_adjustment_weight}",
                            "m_probability": null,
                            "u_probability": null,
                            "bayes_factor": 1.0,
                            "log2_bayes_factor": 0.0,
                            "comparison_vector_value": 3,
                            "bayes_factor_description": "Term frequency adjustment on pnc_single makes comparison 1.00 times more likely to be a match",
                            "column_name": "tf_id_comparison",
                            "value_l": "455736",
                            "value_r": "455736",
                            "term_frequency_adjustment": true,
                            "bar_sort_order": 9
                        },
                        {
                            "sql_condition": "array_length(list_intersect(\"sentence_date_arr_l\", \"sentence_date_arr_r\")) >= 1 and len(\"sentence_date_arr_l\") * len(\"sentence_date_arr_r\") <= 9",
                            "label_for_charts": "Array intersection size >= 1, few elements",
                            "m_probability": 0.14687596629322805,
                            "u_probability": 0.0002201649974203961,
                            "bayes_factor": 667.1176981542365,
                            "log2_bayes_factor": 9.381797505252962,
                            "comparison_vector_value": 4,
                            "bayes_factor_description": "If comparison level is `array intersection size >= 1, few elements` then comparison is 667 times more likely to be a match",
                            "column_name": "sentence_date_arr",
                            "value_l": "['1998-12-10', '2004-04-30']",
                            "value_r": "['1998-12-10', '2004-04-30']",
                            "term_frequency_adjustment": false,
                            "bar_sort_order": 10
                        },
                        {
                            "sql_condition": "override_marker_l IS NULL OR override_marker_r IS NULL",
                            "label_for_charts": "override_marker is NULL",
                            "bayes_factor": 1.0,
                            "log2_bayes_factor": 0.0,
                            "comparison_vector_value": -1,
                            "bayes_factor_description": "If comparison level is `override_marker is null` then comparison is 1 times more likely to be a match",
                            "column_name": "override_marker",
                            "value_l": "None, None",
                            "value_r": "None, None",
                            "term_frequency_adjustment": false,
                            "bar_sort_order": 11
                        },
                        {
                            "sql_condition": "master_defendant_id_l IS NULL OR master_defendant_id_r IS NULL",
                            "label_for_charts": "master_defendant_id is NULL",
                            "bayes_factor": 1.0,
                            "log2_bayes_factor": 0.0,
                            "comparison_vector_value": -1,
                            "bayes_factor_description": "If comparison level is `master_defendant_id is null` then comparison is 1 times more likely to be a match",
                            "column_name": "master_defendant_id",
                            "value_l": "None",
                            "value_r": "None",
                            "term_frequency_adjustment": false,
                            "bar_sort_order": 12
                        },
                        {
                            "column_name": "Final score",
                            "label_for_charts": "Final score",
                            "sql_condition": null,
                            "log2_bayes_factor": 51.54137674766134,
                            "bayes_factor": 3277180928793753.5,
                            "comparison_vector_value": null,
                            "m_probability": null,
                            "u_probability": null,
                            "bayes_factor_description": null,
                            "value_l": "",
                            "value_r": "",
                            "term_frequency_adjustment": null,
                            "bar_sort_order": 13
                        }
                    ]
                }
            ],
            "transform": [
                {
                    "type": "filter",
                    "expr": "datum.match_weight >= scoreThreshold"
                },
                {
                    "type": "lookup",
                    "from": "node-data",
                    "key": "match_id",
                    "fields": [
                        "match_id_l"
                    ],
                    "values": [
                        "name_3_std"
                    ],
                    "as": [
                        "name_3_std_l"
                    ]
                },
                {
                    "type": "lookup",
                    "from": "node-data",
                    "key": "match_id",
                    "fields": [
                        "match_id_r"
                    ],
                    "values": [
                        "name_3_std"
                    ],
                    "as": [
                        "name_3_std_r"
                    ]
                }
            ]
        }
    ],
    "scales": [
        {
            "name": "color",
            "type": "ordinal",
            "domain": {
                "data": "node-data",
                "field": "source_system"
            },
            "range": {
                "scheme": "category10"
            }
        },
        {
            "name": "linkColor",
            "type": "threshold",
            "domain": [
                18,
                24
            ],
            "range": [
                "#fb9191",
                "#fdbe7a",
                "#9fff9f"
            ]
        }
    ],
    "marks": [
        {
            "type": "group",
            "name": "chart",
            "clip": true,
            "encode": {
                "update": {
                    "x": {
                        "value": 0
                    },
                    "y": {
                        "value": 0
                    },
                    "width": {
                        "signal": "width"
                    },
                    "height": {
                        "signal": "plotH"
                    }
                }
            },
            "marks": [
                {
                    "name": "nodes",
                    "type": "symbol",
                    "zindex": 1,
                    "from": {
                        "data": "node-data"
                    },
                    "on": [
                        {
                            "trigger": "fix",
                            "modify": "node",
                            "values": "{fx: fix[0], fy: fix[1]}"
                        }
                    ],
                    "encode": {
                        "enter": {
                            "fill": {
                                "scale": "color",
                                "field": "source_system"
                            },
                            "stroke": {
                                "value": "white"
                            }
                        },
                        "update": {
                            "size": {
                                "signal": "2 * $nodeRadius * $nodeRadius"
                            },
                            "cursor": {
                                "value": "pointer"
                            }
                        }
                    },
                    "transform": [
                        {
                            "type": "force",
                            "iterations": 300,
                            "restart": {
                                "signal": "restart"
                            },
                            "static": {
                                "signal": "$static"
                            },
                            "signal": "force",
                            "forces": [
                                {
                                    "force": "center",
                                    "x": {
                                        "signal": "$cx"
                                    },
                                    "y": {
                                        "signal": "$cy"
                                    }
                                },
                                {
                                    "force": "collide",
                                    "radius": {
                                        "signal": "$nodeRadius"
                                    }
                                },
                                {
                                    "force": "nbody",
                                    "strength": {
                                        "signal": "$nodeCharge"
                                    }
                                },
                                {
                                    "force": "link",
                                    "id": "datum.match_id",
                                    "links": "link-data",
                                    "distance": {
                                        "signal": "$linkDistance"
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "text",
                    "name": "node-labels",
                    "from": {
                        "data": "nodes"
                    },
                    "interactive": false,
                    "zindex": 2,
                    "encode": {
                        "enter": {
                            "align": {
                                "value": "center"
                            },
                            "baseline": {
                                "value": "middle"
                            },
                            "fontSize": {
                                "value": 12
                            },
                            "fontWeight": {
                                "value": "bold"
                            },
                            "fill": {
                                "value": "white"
                            },
                            "text": {
                                "signal": "slice(datum.datum.source_system_id, 0, 4)"
                            }
                        },
                        "update": {
                            "x": {
                                "field": "x"
                            },
                            "y": {
                                "field": "y"
                            }
                        }
                    }
                },
                {
                    "type": "text",
                    "name": "link-labels",
                    "from": {
                        "data": "link-data"
                    },
                    "interactive": false,
                    "aria": false,
                    "zindex": 1,
                    "encode": {
                        "enter": {
                            "align": {
                                "value": "center"
                            },
                            "baseline": {
                                "value": "middle"
                            },
                            "fontSize": {
                                "value": 12
                            },
                            "fill": {
                                "value": "black"
                            },
                            "fontWeight": {
                                "value": "bold"
                            }
                        },
                        "update": {
                            "text": {
                                "signal": "format(datum.match_weight, '.1f')"
                            },
                            "x": {
                                "signal": "(datum.source.x + datum.target.x) / 2"
                            },
                            "y": {
                                "signal": "(datum.source.y + datum.target.y) / 2"
                            }
                        }
                    }
                },
                {
                    "type": "path",
                    "name": "links",
                    "from": {
                        "data": "link-data"
                    },
                    "interactive": true,
                    "zindex": 0,
                    "encode": {
                        "update": {
                            "stroke": {
                                "scale": "linkColor",
                                "field": "match_weight"
                            },
                            "strokeWidth": {
                                "value": 3
                            },
                            "cursor": {
                                "value": "pointer"
                            }
                        }
                    },
                    "transform": [
                        {
                            "type": "linkpath",
                            "require": {
                                "signal": "force"
                            },
                            "shape": "line",
                            "sourceX": "datum.source.x",
                            "sourceY": "datum.source.y",
                            "targetX": "datum.target.x",
                            "targetY": "datum.target.y"
                        }
                    ]
                }
            ]
        },
        {
            "type": "group",
            "name": "waterfall",
            "interactive": false,
            "encode": {
                "update": {
                    "x": {
                        "value": 0
                    },
                    "y": {
                        "signal": "plotH + gap"
                    },
                    "width": {
                        "signal": "$x_step_waterfall * 14"
                    },
                    "height": {
                        "signal": "waterfallH"
                    },
                    "opacity": {
                        "signal": "hoverLink ? 1 : 0"
                    }
                }
            },
            "data": [
                {
                    "name": "wf_raw",
                    "values": [],
                    "on": [
                        {
                            "trigger": "hoverLink",
                            "remove": true
                        },
                        {
                            "trigger": "hoverLink",
                            "insert": "hoverLink && hoverLink.waterfall_data ? hoverLink.waterfall_data : []"
                        }
                    ]
                },
                {
                    "name": "wf_0",
                    "source": "wf_raw",
                    "transform": [
                        {
                            "type": "collect",
                            "sort": {
                                "field": "bar_sort_order",
                                "order": "ascending"
                            }
                        },
                        {
                            "type": "window",
                            "ops": [
                                "sum",
                                "lead"
                            ],
                            "as": [
                                "sum",
                                "lead"
                            ],
                            "fields": [
                                "log2_bayes_factor",
                                "column_name"
                            ],
                            "frame": [
                                null,
                                0
                            ]
                        },
                        {
                            "type": "formula",
                            "expr": "datum.column_name === 'Final score' ? datum.log2_bayes_factor : datum.sum",
                            "as": "sum"
                        },
                        {
                            "type": "formula",
                            "expr": "datum.lead === null ? datum.column_name : datum.lead",
                            "as": "lead"
                        },
                        {
                            "type": "formula",
                            "expr": "(datum.column_name === 'Prior' || datum.column_name === 'Prior match weight') ? 0 : datum.sum - datum.log2_bayes_factor",
                            "as": "previous_sum"
                        },
                        {
                            "type": "formula",
                            "expr": "datum.sum > datum.previous_sum ? datum.column_name : ''",
                            "as": "top_label"
                        },
                        {
                            "type": "formula",
                            "expr": "datum.sum < datum.previous_sum ? datum.column_name : ''",
                            "as": "bottom_label"
                        },
                        {
                            "type": "formula",
                            "expr": "datum.sum > datum.previous_sum ? datum.sum : datum.previous_sum",
                            "as": "sum_top"
                        },
                        {
                            "type": "formula",
                            "expr": "datum.sum < datum.previous_sum ? datum.sum : datum.previous_sum",
                            "as": "sum_bottom"
                        },
                        {
                            "type": "formula",
                            "expr": "(datum.sum + datum.previous_sum) / 2",
                            "as": "center"
                        },
                        {
                            "type": "formula",
                            "expr": "(datum.log2_bayes_factor > 0 ? '+' : '') + datum.log2_bayes_factor",
                            "as": "text_log2_bayes_factor"
                        },
                        {
                            "type": "formula",
                            "expr": "datum.sum < datum.previous_sum ? 4 : -4",
                            "as": "dy"
                        },
                        {
                            "type": "formula",
                            "expr": "datum.sum < datum.previous_sum ? 'top' : 'bottom'",
                            "as": "baseline"
                        },
                        {
                            "type": "formula",
                            "expr": "1. / (1 + pow(2, -1.*datum.sum))",
                            "as": "prob"
                        },
                        {
                            "type": "formula",
                            "expr": "0*datum.sum",
                            "as": "zero"
                        }
                    ]
                },
                {
                    "name": "wf_2",
                    "source": "wf_0",
                    "transform": [
                        {
                            "type": "filter",
                            "expr": "isValid(datum['zero']) && isFinite(+datum['zero'])"
                        }
                    ]
                },
                {
                    "name": "wf_3",
                    "source": "wf_0",
                    "transform": [
                        {
                            "type": "filter",
                            "expr": "isValid(datum['previous_sum']) && isFinite(+datum['previous_sum'])"
                        }
                    ]
                },
                {
                    "name": "wf_4",
                    "source": "wf_0",
                    "transform": [
                        {
                            "type": "filter",
                            "expr": "isValid(datum['center']) && isFinite(+datum['center'])"
                        }
                    ]
                },
                {
                    "name": "wf_5",
                    "source": "wf_0",
                    "transform": [
                        {
                            "type": "filter",
                            "expr": "isValid(datum['sum_top']) && isFinite(+datum['sum_top'])"
                        }
                    ]
                },
                {
                    "name": "wf_6",
                    "source": "wf_0",
                    "transform": [
                        {
                            "type": "filter",
                            "expr": "isValid(datum['sum']) && isFinite(+datum['sum'])"
                        }
                    ]
                }
            ],
            "scales": [
                {
                    "name": "wf_y",
                    "type": "linear",
                    "domain": {
                        "fields": [
                            {
                                "data": "wf_2",
                                "field": "zero"
                            },
                            {
                                "data": "wf_3",
                                "field": "previous_sum"
                            },
                            {
                                "data": "wf_3",
                                "field": "sum"
                            },
                            {
                                "data": "wf_4",
                                "field": "center"
                            },
                            {
                                "data": "wf_5",
                                "field": "sum_top"
                            },
                            {
                                "data": "wf_6",
                                "field": "sum"
                            }
                        ]
                    },
                    "range": [
                        {
                            "signal": "waterfallH"
                        },
                        0
                    ],
                    "zero": false,
                    "nice": true
                },
                {
                    "name": "wf_x",
                    "type": "band",
                    "domain": {
                        "fields": [
                            {
                                "data": "wf_0",
                                "field": "column_name"
                            },
                            {
                                "data": "wf_6",
                                "field": "lead"
                            }
                        ],
                        "sort": {
                            "op": "min",
                            "field": "bar_sort_order"
                        }
                    },
                    "range": {
                        "step": {
                            "signal": "$x_step_waterfall"
                        }
                    },
                    "paddingInner": 0.00,
                    "paddingOuter": 0.00
                }
            ],
            "axes": [
                {
                    "scale": "wf_x",
                    "orient": "bottom",
                    "grid": true,
                    "tickBand": "extent",
                    "gridScale": "wf_y",
                    "domain": false,
                    "labels": false,
                    "aria": false,
                    "maxExtent": 0,
                    "minExtent": 0,
                    "ticks": false,
                    "zindex": 0
                },
                {
                    "scale": "wf_x",
                    "orient": "bottom",
                    "grid": false,
                    "title": "Column",
                    "labelAlign": "center",
                    "labelAngle": 340,
                    "labelPadding": 20,
                    "tickBand": "extent",
                    "labelBaseline": "top",
                    "encode": {
                        "labels": {
                            "update": {
                                "text": {
                                    "signal": "datum.value == 'Prior' || datum.value == 'Final score' ? '' : datum.value"
                                }
                            }
                        }
                    },
                    "zindex": 0
                },
                {
                    "scale": "wf_y",
                    "orient": "left",
                    "grid": false,
                    "title": "Match Weight",
                    "labelOverlap": true,
                    "tickCount": {
                        "signal": "ceil(waterfallH/40)"
                    },
                    "zindex": 0
                },
                {
                    "scale": "wf_y",
                    "orient": "right",
                    "grid": false,
                    "title": "Probability",
                    "labelOverlap": true,
                    "tickCount": {
                        "signal": "ceil(waterfallH/40)"
                    },
                    "encode": {
                        "labels": {
                            "update": {
                                "text": {
                                    "signal": "format(1 / (1 + pow(2, -1*datum.value)), '.2r')"
                                }
                            }
                        }
                    },
                    "zindex": 0
                }
            ],
            "marks": [
                {
                    "name": "wf_zero_rule",
                    "type": "rule",
                    "from": {
                        "data": "wf_2"
                    },
                    "encode": {
                        "update": {
                            "stroke": {
                                "value": "black"
                            },
                            "x": {
                                "field": {
                                    "group": "width"
                                }
                            },
                            "x2": {
                                "value": 0
                            },
                            "y": {
                                "scale": "wf_y",
                                "field": "zero"
                            },
                            "strokeWidth": {
                                "value": 0.5
                            }
                        }
                    }
                },
                {
                    "name": "wf_bars",
                    "type": "rect",
                    "from": {
                        "data": "wf_3"
                    },
                    "encode": {
                        "update": {
                            "fill": [
                                {
                                    "test": "(datum.log2_bayes_factor < 0)",
                                    "value": "red"
                                },
                                {
                                    "value": "green"
                                }
                            ],
                            "opacity": [
                                {
                                    "test": "datum.column_name == 'Prior' || datum.column_name == 'Final score'",
                                    "value": 1
                                },
                                {
                                    "value": 0.5
                                }
                            ],
                            "tooltip": {
                                "signal": "{\"Comparison column\": datum.column_name, \"Value (L)\": datum.value_l, \"Value (R)\": datum.value_r, \"Label\": datum.label_for_charts, \"SQL condition\": datum.sql_condition, \"Comparison vector value\": datum.comparison_vector_value, \"Bayes factor = m/u\": format(datum.bayes_factor, ',.4f'), \"Match weight = log2(m/u)\": format(datum.log2_bayes_factor, ',.4f'), \"Cumulative match probability\": format(datum.prob, '.4f'), \"Match weight description\": datum.bayes_factor_description}"
                            },
                            "ariaRoleDescription": {
                                "value": "bar"
                            },
                            "xc": {
                                "scale": "wf_x",
                                "field": "column_name",
                                "band": 0.5
                            },
                            "width": {
                                "value": 60
                            },
                            "y": {
                                "scale": "wf_y",
                                "field": "previous_sum"
                            },
                            "y2": {
                                "scale": "wf_y",
                                "field": "sum"
                            }
                        }
                    }
                },
                {
                    "name": "wf_bar_labels_inside",
                    "type": "text",
                    "from": {
                        "data": "wf_4"
                    },
                    "encode": {
                        "update": {
                            "fontWeight": {
                                "value": "bold"
                            },
                            "fill": {
                                "value": "white"
                            },
                            "x": {
                                "scale": "wf_x",
                                "field": "column_name",
                                "band": 0.5
                            },
                            "y": {
                                "scale": "wf_y",
                                "field": "center"
                            },
                            "text": [
                                {
                                    "test": "abs(datum.log2_bayes_factor) > 1",
                                    "signal": "format(datum.log2_bayes_factor, '.2f')"
                                },
                                {
                                    "value": ""
                                }
                            ],
                            "align": {
                                "value": "center"
                            },
                            "baseline": {
                                "value": "middle"
                            }
                        }
                    }
                },
                {
                    "name": "wf_top_labels",
                    "type": "text",
                    "from": {
                        "data": "wf_5"
                    },
                    "encode": {
                        "update": {
                            "baseline": {
                                "value": "bottom"
                            },
                            "dy": {
                                "value": -25
                            },
                            "fontWeight": {
                                "value": "bold"
                            },
                            "fill": {
                                "value": "black"
                            },
                            "x": {
                                "scale": "wf_x",
                                "field": "column_name",
                                "band": 0.5
                            },
                            "y": {
                                "scale": "wf_y",
                                "field": "sum_top"
                            },
                            "text": {
                                "signal": "datum.column_name"
                            },
                            "align": {
                                "value": "center"
                            }
                        }
                    }
                },
                {
                    "name": "wf_value_l",
                    "type": "text",
                    "from": {
                        "data": "wf_5"
                    },
                    "encode": {
                        "update": {
                            "baseline": {
                                "value": "bottom"
                            },
                            "dy": {
                                "value": -13
                            },
                            "fontSize": {
                                "value": 8
                            },
                            "fill": {
                                "value": "grey"
                            },
                            "x": {
                                "scale": "wf_x",
                                "field": "column_name",
                                "band": 0.5
                            },
                            "y": {
                                "scale": "wf_y",
                                "field": "sum_top"
                            },
                            "text": {
                                "signal": "datum.term_frequency_adjustment === false ? slice(datum.value_l, 0, 25) : ''"
                            },
                            "align": {
                                "value": "center"
                            }
                        }
                    }
                },
                {
                    "name": "wf_value_r",
                    "type": "text",
                    "from": {
                        "data": "wf_5"
                    },
                    "encode": {
                        "update": {
                            "baseline": {
                                "value": "bottom"
                            },
                            "dy": {
                                "value": -5
                            },
                            "fontSize": {
                                "value": 8
                            },
                            "fill": {
                                "value": "grey"
                            },
                            "x": {
                                "scale": "wf_x",
                                "field": "column_name",
                                "band": 0.5
                            },
                            "y": {
                                "scale": "wf_y",
                                "field": "sum_top"
                            },
                            "text": {
                                "signal": "datum.term_frequency_adjustment === false ? slice(datum.value_r, 0, 25) : ''"
                            },
                            "align": {
                                "value": "center"
                            }
                        }
                    }
                },
                {
                    "name": "wf_connectors",
                    "type": "rule",
                    "from": {
                        "data": "wf_6"
                    },
                    "encode": {
                        "update": {
                            "strokeWidth": {
                                "value": 2
                            },
                            "stroke": {
                                "value": "black"
                            },
                            "x": {
                                "scale": "wf_x",
                                "field": "column_name",
                                "offset": -30,
                                "band": 0.5
                            },
                            "x2": {
                                "scale": "wf_x",
                                "field": "lead",
                                "offset": 30,
                                "band": 0.5
                            },
                            "y": {
                                "scale": "wf_y",
                                "field": "sum"
                            }
                        }
                    }
                }
            ]
        }
    ]
}